"""
Django settings for my_website project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os

from dotenv import load_dotenv # Remove this code in production
load_dotenv()                  # Remove this code in production


COMPANY_NAME = str(os.environ['COMPANY_NAME'])

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ['true', '1']

ALLOWED_HOSTS = []

# pip install django-cors-headers
# If you would like to restrict the foreign requests.
# You'd need to include a new middleware: corsheaders.middleware.CorsMiddleware
# Specify your allowed origin below: "localhost", "https://my-domain.com"
if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        'http://localhost',
        'http://127.0.0.1',
    ]
else:
    CORS_ALLOWED_ORIGINS = []



# Application definition

INSTALLED_APPS = [
    # Top priority apps
    'daphne',
    'whitenoise.runserver_nostatic',

    # Build-in apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Libraries
    'django_htmx',
    'storages',
    'phonenumber_field',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_bootstrap5',
    'django_sass',
    'django_resized',
    'django_recaptcha',
    'django_celery_beat',

    # Django apps
    'app_name.apps.AppNameConfig',
    'users.apps.UsersConfig',
    'chat.apps.ChatConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'my_website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION = 'my_website.wsgi.application'
ASGI_APPLICATION = 'my_website.asgi.application'

CHANNEL_LAYERS = {}

if DEBUG:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer'
        }
    }
else:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_valkey.pubsub.ValkeyPubSubChannelLayer',
            'CONFIG': {
                'hosts': [('localhost', 6379)],
            },
        },
    }

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

LANGUAGES = [
    ('en', 'English'),
    ('pl', 'Polish'),
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5" # Includes styled forms in B5
CRISPY_TEMPLATE_PACK = "bootstrap5"

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'index'
LOGOUT_REDIRECT_URL = 'login'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.zoho.eu'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False # Avoid SSL because itâ€™s less secure

EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = f'(Domain) <{EMAIL_HOST_USER}>'


# Django Phonenumber Field 

# -- WARNING! -- Data loss may occur when changing the DB format!
#
# Hence, it is critical to read the below documentation before making any changes.
# https://django-phonenumber-field.readthedocs.io/en/latest/reference.html#phone-number-format-choices

PHONENUMBER_DB_FORMAT='E164'      # 'E164' by default when unspecified
PHONENUMBER_DEFAULT_FORMAT='E164' # 'E164' by default when unspecified
PHONENUMBER_DEFAULT_REGION='GB'   # 'None' by default when unspecified


# Google reCAPTCHA

RECAPTCHA_PUBLIC_KEY = os.getenv('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = os.getenv('RECAPTCHA_PRIVATE_KEY')


# AWS S3 Bucket CONFIG

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')

AWS_S3_REGION_NAME = 'eu-west-2'
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


STORAGES = {
    "default": {
        "BACKEND": DEFAULT_FILE_STORAGE,
        "OPTIONS": {
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
        },
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        "OPTIONS": {
            "location": STATIC_ROOT,
        },
    },
}


# DeepAI for NSFW image detection

DEEPAI_API_KEY = os.getenv('DEEPAI_API_KEY')
DEEPAI_NSFW_DETECTOR_URL = 'https://api.deepai.org/api/nsfw-detector'
DETECT_NSFW_IMAGES = os.getenv('DETECT_NSFW_IMAGES', 'False').lower() in ['true', '1']


# Stripe Payment System API keys

STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_TEST_KEY') if DEBUG else os.getenv('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_TEST_KEY') if DEBUG else os.getenv('STRIPE_SECRET_KEY')


# One-Time Password for Multi-Factor Authentication

OTP_ISSUER_NAME = COMPANY_NAME
OTP_TRED_NAME = 'throttle_otp_request_expiry_date'
OTP_REQUEST_THROTTLE_INTERVAL = 45
OTP_DEFAULT_INTERVAL = 30 #   seconds
OTP_EMAIL_INTERVAL = 180  # 3 minutes
OTP_SMS_INTERVAL = 180    # 3 minutes


# Twilio API keys

TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')


# Users app settings

# Note: User is permanently removed after the interval.
# Hence, do not set this setting to 0. It's better to
# give user some time in case they change their mind

DELETE_USER_INTERVAL = 30 # N of days


# Celery - Docs: https://docs.celeryq.dev/en/stable/django/index.html

# NOTE: Please remove the below statement once
# Valkey is officially supported by Celery:

""" As of 07/Jul/2025:


  According to "madolson" a Valkey maintainer, at github.com
  (source: https://github.com/celery/celery/issues/9092)

  Valkey is intended to be API compatible with Redis 7.2.X
  However, this is not guaranteed for future versions.


  -----------------------------------------------------


  Valkey has already diverged in one way or another, and it
  still preserves interest due to its open-source license.

  Valkey is said to be developed independently from Redis
  in future releases >=8.X.X possibly becoming more diverse. 
  
  Hence, there is a possibility of Valkey being formally
  supported by the celery library for its unique advantage.


  -----------------------------------------------------

  Note:

  - Celery uses Kombu to manage messaging transports.
  - Kombu supports transports like: redis, amqp, django, etc
  - Valkey, while compatible with Redis, isn't registered as a transport name.


  Therefore,

  IF SET: valkey://localhost:6379/0
  ERROR : KeyError: 'No such transport: valkey'
    - This means that valkey is not a valid Kombu transport.

  IF SET: redis://localhost:6379/0
  ERROR : AttributeError 'NoneType' object has no attribute 'Redis'
    - This means that redis is not installed.


  django-valkey library, registered in installed apps
  recommends the use of valkey instead of redis.

  Unfortunately, doing so fires previously mentioned
  error due to Kombu libraries lack of transport support for Valkey

  This is an ongoing open-issue for the celery library: 
  https://github.com/celery/kombu/issues/2245

 
  -----------------------------------------------------

  Note:

  Kombu library has switched from Redis to Valkey.
  And the team has not experienced transport related issues
  when setting up a bloker via Valkey + Celery.

  According to Zerotask, at github.com
  (source: https://github.com/celery/kombu/pull/2246)

  The team worked on the issue, and updated plus approved
  new changes on the 1st of Jun 2025 for 5.7.0 release.


  -----------------------------------------------------


  The official installed version when installing Valkey
  via pip, was set to kombu==5.5.4 as stated in the requirements.txt

  Hence, the error when:
    CELERY_BROKER_URL = 'valkey://localhost:6379/0'

  Try updating to version - kombu==5.7.0 if possible
  (
    It's not available in pip library yet
    For that reason, you have to use redis for now until
    Valkey is fully supported
  )
  

  -----------------------------------------------------

  TEMPORARY SOLUTION:

  I have decided to install redis (pip install redis)
  and included it in the requirements.txt

  I also decided to use: 'redis://localhost:6379/0'
  due to lack of Valkey transport.

  Once, valkey is supported by celery, you should
  update the CELERY_BROKER_URL and requirements.txt
  if installed redis library is not being utilized.

"""

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'